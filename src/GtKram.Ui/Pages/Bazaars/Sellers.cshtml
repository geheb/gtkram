@page "/Bazaars/{eventId:guid}/Sellers"
@model GtKram.Ui.Pages.Bazaars.SellersModel
@{
    ViewData["Title"] = Model.GetNode().Title;
    ViewData["HasFooter"] = true;

    Guid.TryParse(Request.RouteValues["eventId"] as string, out var eventId);

    Model.BuildHeaderMenu(new { eventId });
    var clothingConverter = new ClothingConverter();
    var sellerConverter = new SellerConverter();
}

@await Html.PartialAsync("_Header")

<section class="section">
    <div class="container">

        <div class="columns is-gapless is-mobile">
            <div class="column is-flex is-align-items-center">@Html.CreateBreadcrumb(new { eventId }, new { id = eventId })</div>
            <div class="column is-narrow">
                <div class="dropdown is-hoverable is-right">
                    <div class="dropdown-trigger">
                        <button class="button" aria-haspopup="true" aria-controls="user-action">
                            <span class="icon is-small">
                                <i class="fas fa-ellipsis-vertical"></i>
                            </span>
                        </button>
                    </div>
                    <div class="dropdown-menu" id="user-action" role="menu">
                        <div class="dropdown-content">
                            <div class="dropdown-item">
                                <div>Gesamt: @Model.Items.Length</div>
                                <div>Zugesagt: @Model.AcceptedCount</div>
                                <div>Abgesagt: @Model.CancelledCount</div>
                                <div>Unbestätigt: @Model.UnconfirmedCount</div>
                                <div>Zugesagt ohne Artikel: @Model.AcceptedWithoutArticleCount</div>
                                <div>Eingetragene Artikel: @Model.ArticleCount</div>
                            </div>
                            <hr class="dropdown-divider" />
                            <a href="@Url.PageLink("AddSeller", null, new { eventId })" class="dropdown-item">
                                Verkäufer anlegen
                            </a>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <h2 class="subtitle">@Model.Event</h2>

        <div class="table-container">
            <table class="table is-striped is-hoverable is-fullwidth">
                <thead>
                    <tr>
                        <th>Name</th>
                        <th>Kleidungsstücke</th>
                        <th>Teilnahme</th>
                        <th>Rolle</th>
                        <th>Kita</th>
                        <th>Artikel</th>
                        <th>Aktion</th>
                    </tr>
                </thead>
                <tbody>
                    @if (Model.Items.Length < 1)
                    {
                        <tr>
                            <td colspan="7"><div class="has-text-centered">Keine Registrierungen gefunden.</div></td>
                        </tr>
                    }
                    @foreach (var r in Model.Items)
                    {
                        <tr class="@(r.Seller is not null ? "clickable-row" : string.Empty)" 
                            data-url="@Url.PageLink("EditSeller", null, new { eventId, id = r.Registration.Id })">
                            <td>@r.Registration.Name (#@(r.Seller is not null ? r.Seller.SellerNumber : 0))</td>
                            <td>
                                @if (r.Registration.ClothingType?.Length > 0)
                                {
                                    <div class="tags">
                                        @foreach (var c in clothingConverter.MapToString(r.Registration.ClothingType))
                                        {
                                            <span class="tag">@c</span>
                                        }
                                    </div>
                                }
                            </td>
                            <td>
                                @if (r.Registration.Accepted is not null)
                                {
                                    <span class="@(r.Registration.Accepted == true ? "tag is-success" : "tag is-danger")">@(r.Registration.Accepted == true ? "Zugesagt" : "Abgesagt")</span>
                                }
                                else
                                {
                                    <span class="tag">Keine</span>
                                }
                            </td>
                            <td>
                                @if (r.Seller?.Role is not null)
                                {
                                    <span class="tag @sellerConverter.RoleToClass(r.Seller.Role)">@sellerConverter.RoleToString(r.Seller.Role)</span>
                                }
                                else
                                {
                                    <span class="tag">Keine</span>
                                }
                            </td>
                            <td>@(r.Registration.PreferredType == Domain.Models.SellerRegistrationPreferredType.Kita ? "Ja" : "Nein")</td>
                            <td>@r.ArticleCount</td>
                            <td>
                                <a class="seller-edit"
                                    href="@(Url.PageLink("EditSeller", null, new { eventId, id = r.Registration.Id }))">
                                    Bearbeiten
                                </a>
                                @if (!Model.IsExpired)
                                {
                                    <span> · </span>
                                    <a class="seller-confirm" href="#"
                                       data-url="@(Url.PageLink(string.Empty, "accept", new { id = r.Registration.Id }))">Zusagen</a>
                                    <span> · </span>
                                    <a class="seller-deny" href="#"
                                       data-url="@(Url.PageLink(string.Empty, "deny", new { id = r.Registration.Id }))">Absagen</a>
                                    <span> · </span>
                                    <a class="open-modal" href="#"
                                       data-target="#deleteSellerModal"
                                       data-seller="@r.Registration.Name (@r.Registration.Email)"
                                       data-url="@(Url.PageLink(string.Empty, "delete", new { id = r.Registration.Id }))">Löschen</a>
                                }
                            </td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>
    </div>
</section>

@Html.CreateModalTemplateWithOkCancel(
    "deleteSellerModal",
    "Registrierung löschen",
    $@"Möchtest du wirklich die Registrierung ""<span class=""modal-seller""></span>"" für den Kinderbasar ""{Model.Event}"" löschen?")

@await Html.PartialAsync("_Footer")

@section Scripts 
{
    <script type="text/javascript">
        $(function () {

            $(".clickable-row").click(function (e) {
                e.stopPropagation();
                window.location = $(this).data("url");
            });

            handleModal({
                id: '#deleteSellerModal',
                token: {@Html.AjaxCsrfToken()},
                init: function(target, relatedTarget) {
                    const info = relatedTarget.dataset['seller'];
                    target.find('.modal-seller').text(info);
                },
                confirm: {
                    dataurl: 'url',
                    action: function () {
                        window.location.reload();
                    },
                    toast: {
                        success: 'Teilnahme wurde gelöscht.',
                        failed: 'Teilnahme konnte nicht gelöscht werden.'
                    }
                }
            });

            $(".seller-confirm").click(function (e) {
                e.stopPropagation();
                e.preventDefault();
                const url = $(this).data('url');
                const spinner = $('<i class="fas fa-spinner fa-spin"></i>');
                spinner.insertAfter($(this));

                $.post(url, {@Html.AjaxCsrfToken()}).done(function (data) {
                    if (data) {
                        createToast('Teilnahme wurde zugesagt.');
                        window.location.reload();
                    } else {
                        createToast('Teilnahme konnte nicht zugesagt werden.');
                    }
                }).always(function () {
                    spinner.remove();
                });
            });

            $(".seller-deny").click(function (e) {
                e.stopPropagation();
                e.preventDefault();
                const url = $(this).data('url');
                const spinner = $('<i class="fas fa-spinner fa-spin"></i>');
                spinner.insertAfter($(this));

                $.post(url, {@Html.AjaxCsrfToken()}).done(function (data) {
                    if (data) {
                        createToast('Teilnahme wurde abgesagt.');
                        window.location.reload();
                    } else {
                        createToast('Teilnahme konnte nicht abgesagt werden.');
                    }
                }).always(function () {
                    spinner.remove();
                });
            });

        });
    </script>
}
