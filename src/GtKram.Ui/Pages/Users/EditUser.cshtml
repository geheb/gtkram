@page "/Users/{id:guid}/Edit"
@model GtKram.Ui.Pages.Users.EditUserModel
@{
    ViewData["Title"] = Model.GetNode().Title;
    ViewData["HasFooter"] = true;
    Guid.TryParse(Request.RouteValues["id"] as string, out var id);
    Model.BuildHeaderMenu(new { id });
    var pageParam = new { id };
    Model.BuildHeaderMenu(pageParam);
    var roleConverter = new RoleConverter();
    var usersUrl = Url.PageLink("Index");
}

@await Html.PartialAsync("_Header")

<section class="section">
    <div class="container">

        <div class="columns is-gapless is-mobile">
            <div class="column is-flex is-align-items-center">@Html.CreateBreadcrumb(pageParam)</div>
            <div class="column is-narrow">
                <div class="dropdown is-hoverable is-right">
                    <div class="dropdown-trigger">
                        <button class="button" aria-haspopup="true" aria-controls="user-action">
                            <span class="icon is-small">
                                <i class="fas fa-ellipsis-vertical"></i>
                            </span>
                        </button>
                    </div>
                    <div class="dropdown-menu" id="user-action" role="menu">
                        @if (!Model.IsDisabled)
                        {
                            <div class="dropdown-content">
                                <a class="confirm-email dropdown-item" href="#"
                                    data-url="@(Url.PageLink(string.Empty, "confirmemail", new { id }))">
                                    Bestätigung anfordern
                                </a>
                                <a class="dropdown-item open-modal" href="#"
                                   data-target="#resetTwoFactorModal"
                                   data-url="@(Url.PageLink(string.Empty, "resettwofactor", new { id }))">
                                    2FA zurücksetzen
                                </a>
                            </div>
                        }
                    </div>
                </div>
            </div>
        </div>

        <div class="columns mt-4">
            <div class="column is-half">

                @if (!ModelState.IsValid)
                {
                    <div class="notification is-danger">
                        <button class="delete"></button>
                        <div asp-validation-summary="All"></div>
                    </div>
                }

                <form method="post">
                    <fieldset disabled="@Model.IsDisabled">
                        <div class="field">
                            <label class="label" asp-for="Input.Name"></label>
                            <div class="control">
                                <input class="input" type="text" asp-for="Input.Name" autofocus="" />
                            </div>
                            <span asp-validation-for="Input.Name"></span>
                        </div>
                        <div class="field">
                            <label class="label" asp-for="Input.Email"></label>
                            <div class="control">
                                <input class="input" type="email" asp-for="Input.Email" />
                            </div>
                            <span asp-validation-for="Input.Email"></span>
                        </div>
                        <div class="field">
                            <label class="label" asp-for="Input.Password"></label>
                            <div class="control has-icons-right">
                                <input class="input" type="password" asp-for="Input.Password" />
                                <span class="icon is-right is-toggle-password">
                                    <i class="fas fa-eye"></i>
                                </span>
                            </div>
                            <span asp-validation-for="Input.Password"></span>
                        </div>
                        <div class="field">
                            <label class="label">Rollen</label>
                        </div>
                        <div class="field">
                            <input id="checkBoxAdmin" type="checkbox" asp-for="Input.Roles[0]" />
                            <label for="checkBoxAdmin">@roleConverter.RoleToString(Domain.Models.UserRoleType.Administrator)</label>

                            <input id="checkBoxManager" type="checkbox" asp-for="Input.Roles[1]" />
                            <label for="checkBoxManager">@roleConverter.RoleToString(Domain.Models.UserRoleType.Manager)</label>

                            <input id="checkBoxSeller" type="checkbox" asp-for="Input.Roles[2]" />
                            <label for="checkBoxSeller">@roleConverter.RoleToString(Domain.Models.UserRoleType.Seller)</label>

                            <input id="checkBoxHelper" type="checkbox" asp-for="Input.Roles[3]" />
                            <label for="checkBoxHelper">@roleConverter.RoleToString(Domain.Models.UserRoleType.Billing)</label>
                        </div>

                        <button class="button is-primary" type="submit">Speichern</button>
                    </fieldset>
                </form>

            </div>

        </div>


    </div>

</section>

@await Html.PartialAsync("_Footer")

@Html.CreateModalTemplateWithOkCancel(
    "resetTwoFactorModal",
    "2FA zurücksetzen",
    "Möchtest du wirklich die Zwei-Faktor-Authentifizierung für den aktuellen Benutzer zurücksetzen?")

@section Scripts {
<script type="text/javascript">
    $(function () {
        $(".confirm-email").click(function (e) {
            e.preventDefault();
            const url = $(this).data('url');
            const spinner = $('<i class="fas fa-spinner fa-spin"></i>');
            $(this).append(spinner);
            $.post(url, {@Html.AjaxCsrfToken()}).done(function (data) {
                if (data) {
                    createToast('Eine E-Mail-Bestätigung wurde angefordert.');
                } else {
                    createToast('Eine E-Mail-Bestätigung konnte nicht angefordert werden.', 'is-danger');
                }
            }).always(function () {
                spinner.remove();
            });
        });

        handleModal({
            id: '#resetTwoFactorModal',
            token: {@Html.AjaxCsrfToken()},
            confirm: {
                dataurl: 'url',
                action: function () {
                    sleep(1000).then(() => window.location = '@Html.Raw(usersUrl)');
                },
                toast: {
                    success: 'Die 2FA wurde zurückgesetzt.',
                    failed: 'Die 2FA konnte nicht zurückgesetzt werden.'
                }
            }
        });

    });
</script>
}